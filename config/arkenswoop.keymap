/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#include "../zmk-nodefree-config/helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include "keys_de.h"
#include <dt-bindings/zmk/bt.h>
#include "combos.dtsi"
#include "mouse.dtsi"
#if __has_include("extras-arkenswoop.dtsi")
#include "extras-arkenswoop.dtsi"
#endif

#define ________ &trans
#define __XXXX__ &none

#define DE_AUML DE_A_UMLAUT
#define DE_OUML DE_O_UMLAUT
#define DE_UUML DE_U_UMLAUT

#define BONE 0
#define SYM 1
#define NAV 2
#define FN  3
#define SYS 4


/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <200>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs



/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};


// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: num-word | double-tap: sticky num-layer | hold: num-layer

#define SMART_NUM &smart_num SYM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl SYM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <SYM>;
    continue-list = <BSPC DEL DOT COMMA DE_PLUS DE_MINUS DE_STAR DE_FSLH LS(N0)>;
    ignore-modifiers;     
};


ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)


/* BLUETOOTH MACROS */
ZMK_BEHAVIOR(m_bt_sel, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to2>
      , <&bt BT_SEL MACRO_PLACEHOLDER>
      ;
)

ZMK_BEHAVIOR(m_bt_clr_prof, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to1>
      , <&m_bt_sel MACRO_PLACEHOLDER>
      , <&bt BT_CLR>
    ;
)

ZMK_BEHAVIOR(ht_btp, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <3000>;
    bindings = <&m_bt_clr_prof>,<&m_bt_sel>;
)

/* SYMBOLS */

// + or * (with SHFT)
ZMK_BEHAVIOR(p_m, mod_morph,
    bindings = <&kp DE_PLUS>, <&kp DE_STAR>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// - or / (with SHFT)
ZMK_BEHAVIOR(m_d, mod_morph,
    bindings = <&kp DE_MINUS>, <&kp DE_FSLH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// , or . (with SHFT)
ZMK_BEHAVIOR(c_d, mod_morph,
    bindings = <&kp COMMA>, <&kp DOT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ( and { (with SHFT)
ZMK_BEHAVIOR(lparbrace, mod_morph,
    bindings = <&kp DE_LEFT_PARENTHESIS>, <&kp DE_LEFT_BRACE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ) and } (with SHFT)
ZMK_BEHAVIOR(rparbrace, mod_morph,
    bindings = <&kp DE_RIGHT_PARENTHESIS>, <&kp DE_RIGHT_BRACE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// < and [ (with SHFT)
ZMK_BEHAVIOR(ltbrack, mod_morph,
    bindings = <&kp DE_LESS_THAN>, <&kp DE_LEFT_BRACKET>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// > and ] (with SHFT)
ZMK_BEHAVIOR(gtbrack, mod_morph,
    bindings = <&kp DE_GREATER_THAN>, <&kp DE_RIGHT_BRACKET>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ' and " (with SHFT)
ZMK_BEHAVIOR(quotes, mod_morph,
    bindings = <&kp DE_SQT>, <&kp DE_DQT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ´ and ` (with SHFT)
ZMK_BEHAVIOR(accents, mod_morph,
    bindings = <&kp DE_ACUTE>, <&kp DE_GRAVE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ? and ! (with SHFT)
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp DE_QMARK>, <&kp DE_EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// $ and € (with SHFT)
ZMK_BEHAVIOR(eurodoll, mod_morph,
    bindings = <&kp DE_DOLLAR>, <&kp DE_EURO>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// / and \ (with SHFT) 
ZMK_BEHAVIOR(fbslh, mod_morph,
    bindings = <&kp DE_FSLH>, <&kp DE_BSLH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ß and  (with SHFT)  
ZMK_BEHAVIOR(sz, mod_morph,
    bindings = <&kp DE_SZ>, <&kp DE_CAPITAL_SZ>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ^ and ~ (with SHFT)  
ZMK_BEHAVIOR(cartil, mod_morph,
    bindings = <&kp DE_CARET>, <&kp DE_TILDE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// Copy
// Ctrl+C or Ctrl+Ins  (with SHFT)  
ZMK_BEHAVIOR(copy, mod_morph,
    bindings = <&kp LC(C)>, <&kp LC(INS)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// Paste
// Ctrl+V or Shft+Ins  (with SHFT)  
ZMK_BEHAVIOR(paste, mod_morph,
    bindings = <&kp LC(V)>, <&kp LS(INS)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


/* Switcher encoder */
/* Encoder switches windows */
/ {
    behaviors {
        switcher: switcher {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_SW";
            #sensor-binding-cells = <0>;
            bindings = <&alttab>, <&alttab_p>;
        };
};
};
ZMK_BEHAVIOR(alttab, tri_state,
    bindings = <&kp LALT>, <&kp TAB>, <&kt LALT>;
)
ZMK_BEHAVIOR(alttab_p, tri_state,
    bindings = <&kp LALT>, <&kp LS(TAB)>, <&kt LALT>;
)


ZMK_CONDITIONAL_LAYER(SYM NAV, FN)

ZMK_LAYER(_BONE,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp J         &kp D         &kp U         &kp A         &kp X              &kp P         &kp H         &kp L         &kp M         &kp W       
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &hml LGUI C   &hml LALT T   &hml LCTRL I  &hml LSHFT E  &kp O              &kp B         &hmr LSHFT N  &hmr LCTRL R  &hmr LALT S   &hmr LGUI G 
    // ├─────────────┼─────────────┼───── ü ─────┼───── ä ─────┼───── ö ─────┤    ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F         &kp V         &kp DE_UUML   &kp DE_AUML   &kp DE_OUML        &kp Z         &kp Y         &kp COMMA     &kp DOT       &kp K       
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────╯
                                     &mo SYS       &lt_spc SYM 0 &lt NAV RET        &lt NAV BSPC  &kp LSHFT     &mo SYS
    //                             ╰─────────────┴─────────────┴─────────────╯    ╰─────────────┴─────────────┴─────────────╯
    ,                            &inc_dec_kp RIGHT LEFT                                                     &inc_dec_kp DOWN UP                        
    //                                (       )                                                                  (       )
)

ZMK_LAYER(_SYM,
    // ╭────── # ────┬─────────────┬─────────────┬─────────────┬──── + * ────╮    ╭──── ? ! ────┬──── < [ ────┬──── > ] ────┬───── = ─────┬───── & ─────╮
         &kp DE_HASH   &kp N7        &kp N8        &kp N9        &p_m               &qexcl        &ltbrack      &gtbrack      &kp DE_EQUAL  &kp DE_AMPS   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼──── - / ────┤    ├──── / \ ────┼──── ( { ────┼──── ) } ────┼───── _ ─────┼───── … ─────┤
         &hml LGUI N0  &hml LALT N4  &hml LCTRL N5 &hml LSHFT N6 &m_d               &fbslh        &lparbrace    &rparbrace    &kp DE_UNDER  &kp RA(DOT) 
    // ├────── | ────┼─────────────┼─────────────┼─────────────┼──── , . ────┤    ├──── ^ ~ ────┼───── % ─────┼──── ' " ────┼──── ´ ` ────┼──── € $ ────┤
         &kp DE_PIPE   &kp N1        &kp N2        &kp N3        &c_d               &cartil       &kp DE_PRCNT  &quotes       &accents      &eurodoll     
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ________      ________      ________           ________      ________      ________   
    //                             ╰─────────────┴─────────────┴─────────────╯    ╰─────────────┴─────────────┴─────────────╯
    ,                            &inc_dec_kp RIGHT LEFT                                                 &inc_dec_kp PAGE_DOWN PAGE_UP                    
    //                                (       )                                                                  (       )
)

ZMK_LAYER(_NAV,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp PG_UP     &kp BSPC      &kp UP        &kp DEL       &kp HOME            ________     &kp KP_N7     &kp KP_N8     &kp KP_N9      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp END             ________     &kp KP_N4     &kp KP_N5     &kp KP_N6      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp INS       &kp LC(X)     &copy         &paste        &kp LC(B)          &kp KP_N0     &kp KP_N1     &kp KP_N2     &kp KP_N3      ________   
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ________      ________      ________           ________      ________      ________  
    //                             ╰─────────────┴─────────────┴─────────────╯    ╰─────────────┴─────────────┴─────────────╯
    ,                                 &switcher                                                   &inc_dec_kp LC(Z) LC(Y)  //UNDO REDO                      
    //                                (       )                                                                  (       )
)

ZMK_LAYER(_FN,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp F12       &kp F7        &kp F8        &kp F9        &kp PSCRN           &kp CAPS       U_WH_D        U_MS_U        U_WH_U       ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F11       &kp F4        &kp F5        &kp F6        &kp SLCK            ________       U_MS_L        U_MS_D        U_MS_R       ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F10       &kp F1        &kp F2        &kp F3        &kp PAUSE_BREAK     ________      ________      ________      ________      ________   
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ________      ________      ________            U_BTN2        U_BTN1      &kp K_MUTE  
    //                             ╰─────────────┴─────────────┴─────────────╯    ╰─────────────┴─────────────┴─────────────╯
    ,                                &inc_dec_kp RIGHT LEFT                                                        &inc_dec_kp K_VOL_UP K_VOL_DN                       
    //                                (       )                                                                 (       )
)

ZMK_LAYER(_SYS,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &ht_btp 0 0   &ht_btp 1 1   &ht_btp 2 2   &ht_btp 3 3   &ht_btp 4 4         ________      ________      ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________      ________ &ext_power EP_OFF &ext_power EP_ON &bootloader      &bootloader  &ext_power EP_ON ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________      ________      ________      ________     &sys_reset         &sys_reset     ________      ________      ________      ________     
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ________      ________      ________           ________      ________      ________  
    //                             ╰─────────────┴─────────────┴─────────────╯    ╰─────────────┴─────────────┴─────────────╯
    //,                                 &none                                                                   &none                  
    //                                (       )                                                                  (       )
)

