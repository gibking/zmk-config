/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include "../zmk-nodefree-config/keypos_def/keypos_50keys.h"
#include "../zmk-nodefree-config/helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include "combos.dtsi"
#if __has_include("extras.dtsi")
#include "extras.dtsi"
#endif

#define ________ &trans
#define __XXXX__ &none
#define T_COPY__ &kp LC(INS)
#define T_PASTE_ &kp LS(INS)
#define EXT_ON &ext_power EP_ON
#define EXT_OFF &ext_power EP_OFF
#define UG_ON &rgb_ug RGB_ON
#define UG_OFF &rgb_ug RGB_OFF


#define BONE 0
#define QWERTZ 1
#define SYM 2
#define NAV 3
#define FN  4
#define SYS 5

#define RGB_RED RGB_COLOR_HSB_VAL(0,100,20)
#define RGB_GREEN RGB_COLOR_HSB_VAL(120,100,20)
#define RGB_BLUE RGB_COLOR_HSB_VAL(240,100,20)
#define RGB_WHITE RGB_COLOR_HSB_VAL(0,0,20)
#define RGB_DEFAULT RGB_COLOR_HSB_VAL(240,100,20)


/ {
    chosen {
        /delete-property/ zmk,default-power-domain;
    };
};
&led_strip {
    chain-length = <6>; //UG only
    power-domain = <&core_power_domain>;
};
&left_encoder {
    steps = <60>;
};
&right_encoder {
    steps = <60>;
};

/ {
    behaviors {
        rgb_encoder_hue: rgb_encoder_hue {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_HUE";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        rgb_encoder_brt: rgb_encoder_brt {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_BRT";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <20>;
    };
};


/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};


// momentary layer with color
// e.g. &mo SYM GREEN
ZMK_BEHAVIOR(moc, macro_two_param,
    bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_param_2to2>
        , <&rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        , <&macro_tap &rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
        ;
)


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH4 LH3 LH2 LH1 LH0 LF0 LF1 RF0 RF1 RH0 RH1 RH2 RH3 RH4                 // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs



/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};


// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num SYM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl SYM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <SYM>;
    continue-list = <BSPC DEL DOT COMMA KP_PLUS KP_MINUS KP_MULTIPLY KP_DIVIDE LS(N0)>;
    ignore-modifiers;     
};

ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)


/* BLUETOOTH MACROS */
ZMK_BEHAVIOR(m_bt_sel, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to2>
      , <&bt BT_SEL MACRO_PLACEHOLDER>
      ;
)

ZMK_BEHAVIOR(m_bt_clr_prof, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to1>
      , <&m_bt_sel MACRO_PLACEHOLDER>
      , <&bt BT_CLR>
    ;
)

ZMK_BEHAVIOR(ht_btp, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <3000>;
    bindings = <&m_bt_clr_prof>,<&m_bt_sel>;
)

/* SYMBOLS */

// + or * (with LSHFT)
ZMK_BEHAVIOR(p_m, mod_morph,
    bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
    mods = <MOD_LSFT>;
)

// - or / (with LSHFT)
ZMK_BEHAVIOR(m_d, mod_morph,
    bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
    mods = <MOD_LSFT>;
)
// , or . (with LSHFT)
ZMK_BEHAVIOR(c_d, mod_morph,
    bindings = <&kp COMMA>, <&kp DOT>;
    mods = <MOD_LSFT>;
)
// () with cursor in between
ZMK_BEHAVIOR(par_pair, macro,
    bindings = <&kp LS(N8)>, <&kp LS(N9)>, <&kp LEFT>;
)
// {} with cursor in between
ZMK_BEHAVIOR(brace_pair, macro,
    bindings = <&kp RA(N7)>, <&kp RA(N0)>, <&kp LEFT>;
)
// <> with cursor in between
ZMK_BEHAVIOR(gtlt_pair, macro,
    bindings = <&kp NUBS>, <&kp PIPE2>, <&kp LEFT>;
)
// [] with cursor in between
ZMK_BEHAVIOR(bracket_pair, macro,
    bindings = <&kp RA(N8)>, <&kp RA(N9)>, <&kp LEFT>;
)
// () and {} (with shift) on same key
ZMK_BEHAVIOR(lparbrace, mod_morph,
    bindings = <&par_pair>, <&brace_pair>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ) and } (with shift) on same key
ZMK_BEHAVIOR(rparbrace, mod_morph,
    bindings = <&kp LS(N9)>, <&kp RA(N0)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// < and [] (with shift) on same key
ZMK_BEHAVIOR(ltbrack, mod_morph,
    bindings = <&kp NUBS>, <&bracket_pair>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// > and ] (with shift) on same key
ZMK_BEHAVIOR(gtbrack, mod_morph,
    bindings = <&kp PIPE2>, <&kp RA(N9)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp UNDER>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// tap: € | shift + tap: $
ZMK_BEHAVIOR(eurodoll, mod_morph,
    bindings = <&kp LS(N4)>, <&kp RA(E)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// tap: / | shift + tap: Backslash 
ZMK_BEHAVIOR(fbslh, mod_morph,
    bindings = <&kp AMPS>, <&kp RA(MINUS)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


/* Switcher encoder */
/* Encoder switches workspaces and windows (when pressed/LALT mod) */
/ {
    behaviors {
        switcher: switcher {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_SW";
            #sensor-binding-cells = <0>;
            bindings = <&sw_right>, <&sw_left>;
        };
    };
};
ZMK_BEHAVIOR(sw_right, mod_morph,
    bindings = <&kp LG(RIGHT)>, <&kp RIGHT>;
    mods = <MOD_LALT>;
    keep-mods = <MOD_LALT>;
)
ZMK_BEHAVIOR(sw_left, mod_morph,
    bindings = <&kp LG(LEFT)>, <&kp LEFT>;
    mods = <MOD_LALT>;
    keep-mods = <MOD_LALT>;
)
ZMK_BEHAVIOR(sw_win, macro,
    wait-ms = <10>;
    bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp TAB>
        , <&macro_pause_for_release>
        , <&macro_release &kp LALT>
        ;
)

ZMK_CONDITIONAL_LAYER(SYM FN, SYS)

ZMK_LAYER(_BONE,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬───── ß ─────╮
         &kp ESC       &kp J         &kp D         &kp U         &kp A         &kp X                                                                     &kp P         &kp H         &kp L         &kp M         &kp W         &kp MINUS    
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp TAB       &hml LGUI C   &hml LALT T   &hml LSHFT I  &hml LCTRL E  &kp O                                                                     &kp B         &hmr LCTRL N  &hmr RSHFT R  &hmr LALT S   &hmr LGUI G   &kp Q
    // ├─────────────┼─────────────┼─────────────┼───── ü ─────┼───── ä ─────┼───── ö ─────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          __XXXX__     &kp F         &kp V         &kp LEFT_BRACKET  &kp SQT   &kp SEMI      &to QWERTZ    SMART_NUM         SMART_NUM      __XXXX__     &kp Z         &kp Y         &kp COMMA     &kp DOT       &kp K         &key_repeat
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                   &kp LSHFT     &kp BSPC      &lt_spc SYM 0 &lt NAV RET   &mo FN            &mo FN        &lt NAV BSPC  &sk LSHFT     &mo SYM       &kp LSHFT 
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                                                            &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                                                                        (       )
)
ZMK_LAYER(_QWERTY,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬───── ü ─────╮
         &kp ESC       &kp Q         &kp W         &kp E         &kp R         &kp T                                                                     &kp Y         &kp U         &kp I         &kp O         &kp P         &kp LEFT_BRACKET    
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼───── ö ─────┼───── ä ─────┤
         &kp TAB       &hml LGUI A   &hml LALT S   &hml LSHFT D  &hml LCTRL F  &kp G                                                                     &kp H         &hmr LCTRL J  &hmr RSHFT K  &hmr LALT L   &hmr LGUI SEMI &kp SQT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          __XXXX__     &kp Z         &kp X         &kp C         &kp V         &kp B         &to BONE      SMART_NUM         SMART_NUM     __XXXX__      &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH     &key_repeat
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                   &kp LSHFT     &kp BSPC      &lt_spc SYM 0 &lt NAV RET   &mo FN            &mo FN        &lt NAV BSPC  &sk LSHFT     &mo SYM       &kp LSHFT  
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                                                            &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                                                                        (       )
)

ZMK_LAYER(_SYM,
    // ╭─────────────┬────── # ────┬─────────────┬─────────────┬─────────────┬──── + * ────╮                                                           ╭──── ? ! ────┬──── < [ ────┬──── > ] ────┬───── = ─────┬───── & ─────┬──── € $ ────╮
          ________     &kp NUHS      &kp N7        &kp N8        &kp N9        &p_m                                                                      &qexcl        &ltbrack      &gtbrack      &kp LS(N0)    &kp LS(N6)    &eurodoll
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼──── - / ────┤                                                           ├──── / \ ────┼──── ( { ────┼──── ) } ────┼───── _ ─────┼───── … ─────┼───── @ ─────┤
          ________     &hml LGUI N0  &hml LALT N4  &hml LCTRL N5 &hml LSHFT N6 &m_d                                                                      &fbslh        &lparbrace    &rparbrace    &kp QMARK     &kp RA(DOT)   &kp RA(Q)
    // ├─────────────┼────── | ────┼─────────────┼─────────────┼─────────────┼──── , . ────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼───── ^ ─────┼───── % ─────┼───── " ─────┼───── ' ─────┼───── ` ─────┼───── ~ ─────┤
          ________     &kp RA(NUBS)  &kp N1        &kp N2        &kp N3        &c_d           ________      ________          ________      ________     &kp GRAVE     &kp PERCENT   &kp LS(N2)    &kp PIPE      &kp RA(PIPE)  &kp RA(RBKT)
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ________      ________      ________      ________      ________          ________      ________      ________      ________       ________
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                                                      &inc_dec_kp C_BRI_INC C_BRI_DEC                        
    //                                               (       )                                                                                                                        (       )
)

ZMK_LAYER(_NAV,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
           ________    &kp PG_UP     &kp BSPC      &kp UP        &kp DEL       &kp HOME                                                                   ________      ________      ________      ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           ________    &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp END                                                                    ________      ________      ________      ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           ________    &kp INS       &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(B)      ________     ________           ________      ________      ________      ________      ________      ________     ________       ________
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ________      ________      ________      ________     ________           ________      ________      ________      ________      ________  
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp PAGE_DOWN PAGE_UP                                                                                                   &inc_dec_kp LC(Z) LC(Y)  //UNDO REDO                        
    //                                               (       )                                                                                                                        (       )
)

ZMK_LAYER(_FN,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ________     &kp F10       &kp F7        &kp F8        &kp F9        &kp PSCRN                                                                  ________      ________      ________      ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________     &kp F11       &hml LALT F4  &hml LSHFT F5 &hml RCTRL F6 &kp SLCK                                                                   ________      ________      ________      ________      ________      ________   
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________     &kp F10       &kp F1        &kp F2        &kp F3        &kp PAUSE_BREAK ________     ________          ________      ________      ________      ________      ________      ________      ________      ________   
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                   &sw_win        ________      ________      ________      ________          ________      ________      ________      ________     &kp K_MUTE  
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                                &switcher                                                                                                              &inc_dec_kp K_VOL_UP K_VOL_DN                       
    //                                               (       )                                                                                                                        (       )
)

ZMK_LAYER(_SYS,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ________     &ht_btp 0 0   &ht_btp 1 1   &ht_btp 2 2   &ht_btp 3 3   &ht_btp 4 4                                                                ________      ________      ________      ________      ________     ________  
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________      ________      ________     EXT_ON        EXT_OFF       &bootloader                                                               &bootloader   EXT_ON        EXT_OFF        ________      ________     ________  
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ________      ________   &rgb_ug RGB_EFF UG_ON        UG_OFF         &sys_reset     ________      ________          ________       ________    &sys_reset    UG_ON         UG_OFF      &rgb_ug RGB_EFF  ________     ________
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ________      ________      ________      ________      ________          ________       ________     ________      ________      ________  
    //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                            &rgb_encoder_brt                                                                                                                 &rgb_encoder_hue                  
    //                                               (       )                                                                                                                        (       )
)

