/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include "../zmk-nodefree-config/keypos_def/keypos_50keys.h"
#include "../zmk-nodefree-config/helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define ____ &trans
#define XXXX &none
#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FN  4
#define SYS 5

#define RGB_RED RGB_COLOR_HSB_VAL(0,100,20)
#define RGB_GREEN RGB_COLOR_HSB_VAL(120,100,20)
#define RGB_BLUE RGB_COLOR_HSB_VAL(240,100,20)
#define RGB_WHITE RGB_COLOR_HSB_VAL(0,0,20)
#define RGB_DEFAULT RGB_COLOR_HSB_VAL(240,100,20)


&led_strip {
    chain-length = <6>; //UG only
};
&left_encoder {
    steps = <20>;
};
&right_encoder {
    steps = <20>;
};

/ {
behaviors {
        rgb_encoder_hue: rgb_encoder_hue {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_HUE";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        rgb_encoder_brt: rgb_encoder_brt {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_BRT";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <20>;
    };
};


/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};


// momentary layer with color
// e.g. &mo SYM GREEN
ZMK_BEHAVIOR(moc, macro_two_param,
    bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_param_2to2>
        , <&rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        , <&macro_tap &rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
        ;
)


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH4 LH3 LH2 LH1 LH0 LF0 LF1 RF0 RF1 RH0 RH1 RH2 RH3 RH4                 // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs



/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA KP_PLUS KP_MINUS KP_MULTIPLY KP_DIVIDE LS(N0)>;
    ignore-modifiers;     
};


ZMK_BEHAVIOR(m_blink_w1, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
    ;
)
ZMK_BEHAVIOR(m_blink_w2, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
    ;
)
ZMK_BEHAVIOR(m_blink_w3, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD RGB_DEFAULT>
    ;
)

ZMK_BEHAVIOR(m_bt_sel, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to2>
      , <&bt BT_SEL MACRO_PLACEHOLDER>
      , <&m_blink_w1>
      ;
)

ZMK_BEHAVIOR(m_bt_clr_prof, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to1>
      , <&m_bt_sel MACRO_PLACEHOLDER>
      , <&bt BT_CLR>
      , <&m_blink_w2>
    ;
)
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
ZMK_BEHAVIOR(ht_btp, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <3000>;
    bindings = <&m_bt_clr_prof>,<&m_bt_sel>;
)

ZMK_BEHAVIOR(p_m, mod_morph,
    bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
    mods = <MOD_LSFT>;
)
ZMK_BEHAVIOR(m_d, mod_morph,
    bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
    mods = <MOD_LSFT>;
)
ZMK_BEHAVIOR(c_d, mod_morph,
    bindings = <&kp COMMA>, <&kp DOT>;
    mods = <MOD_LSFT>;
)
ZMK_BEHAVIOR(par_pair, macro,
    bindings = <&kp LS(N8)>, <&kp LS(N9)>, <&kp LEFT>;
)
ZMK_BEHAVIOR(brace_pair, macro,
    bindings = <&kp RA(N7)>, <&kp RA(N0)>, <&kp LEFT>;
)
ZMK_BEHAVIOR(gtlt_pair, macro,
    bindings = <&kp NUBS>, <&kp PIPE2>, <&kp LEFT>;
)
ZMK_BEHAVIOR(bracket_pair, macro,
    bindings = <&kp RA(N8)>, <&kp RA(N9)>, <&kp LEFT>;
)


// ( and { (with shift) on same key
ZMK_BEHAVIOR(lparbrace, mod_morph,
    bindings = <&par_pair>, <&brace_pair>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ) and } (with shift) on same key
ZMK_BEHAVIOR(rparbrace, mod_morph,
    bindings = <&kp LS(N9)>, <&kp RA(N0)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// < and [ (with shift) on same key
ZMK_BEHAVIOR(ltbrack, mod_morph,
    bindings = <&kp NUBS>, <&bracket_pair>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// > and ] (with shift) on same key
ZMK_BEHAVIOR(gtbrack, mod_morph,
    bindings = <&kp PIPE2>, <&kp RA(N9)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// BACKSPACE and DELETE (with shift) on same key
ZMK_BEHAVIOR(bspc_del, mod_morph,
    bindings = <&kp BACKSPACE>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// SPACE and RETURN (with shift) on same key
ZMK_BEHAVIOR(space_ret, mod_morph,
    bindings = <&kp SPACE>, <&kp RET>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


/*
KP      de/qwertz
BSLH    #
PIPE2   >
UNDER   ?
LBKT    ü
RBKT    +
CARET   &
SLASH   -
LBRC    Ü
RBRC    *
STAR    (
HASH    §
DOLAR   $
PIPE    '
TILDE   °
GRAVE   ^
PERCENT %
PLUS    `
EXCL    !
EQUAL   ´
AMPS    /
LPAR    )
MINUS   ß
COLON   Ö
AT_SIGN "
SQT     ä
DQT     Ä
SEMI    ö
QMARK   _
NUBS    <
APOS    ä
LT  ;
GT  :
TILDE   °
TILDE2  '
NUHS    #
RA(PIPE)`
RA(HASH)£
RA(BSLH)’
RA(PIPE2)ˍ
RA(GRAVE)^
RA(NUBS)|
LS(N6)  &
LS(MINUS)?
RA(MINUS)\
RA(DOT)…
RA(PIPE)`
RA(NUHS)’
RA(NUBS)|
*/

ZMK_CONDITIONAL_LAYER(NUM FN, SYS)

/*
ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp ESC       &kp Q         &kp W         &kp E         &kp R         &kp T                                                                     &kp Y         &kp U         &kp I         &kp O         &kp P         &kp LEFT_BRACKET    
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hrm LSHIFT A &hrm LCTRL S  &hrm LALT D   &hrm LGUI F   &kp G                                                                     &kp H         &hrm LGUI J   &hrm LALT K   &hrm LCTRL L &hrm RSHIFT SEMI &kp SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &ss_cw        &kp Z         &kp X         &kp C         &kp V         &kp B         &kp K_COPY    &kp LCTRL         &kp RCTRL        XXXX       &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH     &kp RSHFT
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    &kp K_COPY    &lm_symbol    &lm_nav       &space_ret       ____           &bspc_del     &space_ret    &lm_nav       &lm_symbol    &kp K_PASTE
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
) 
*/

ZMK_LAYER(BONE,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬───── ß ─────╮
          &kp ESC       &kp J         &kp D         &kp U         &kp A         &kp X                                                                     &kp P         &kp H         &kp L         &kp M         &kp W         &kp RA(MINUS)    
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hml LGUI C   &hml LALT T   &hml LSHFT I  &hml LCTRL E  &kp O                                                                     &kp B         &hmr LCTRL N  &hmr RSHFT R  &hmr LALT S   &hmr LGUI G   &kp Q
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXXX      &kp F         &kp V         &kp LEFT_BRACKET  &kp SQT   &kp SEMI         XXXX          XXXX              XXXX          XXXX       &kp Z         &kp Y         &kp COMMA     &kp DOT       &kp K         &key_repeat
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    &kp K_COPY    &mo NAV       &mo FN       &lt SYM SPACE  &kp RET           &bspc_del     &smart_shft    SMART_NUM    &mo NAV          XXXX
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(SYM,
     // ╭─────────────┬───── … ─────┬───── _ ─────┬───── [ ─────┬───── ] ─────┬───── ^ ─────╮                                                           ╭───── ! ─────┬──── < [ ────┬──── > ] ────┬───── = ─────┬───── & ─────┬───── € ─────╮
          &kp PSCRN     &kp RA(DOT)   &kp QMARK     &kp RA(N8)    &kp RA(N9)    &kp GRAVE                                                                 &kp EXCL      &ltbrack      &gtbrack      &kp LS(N0)    &kp LS(N6)    &kp RA(E)
     // ├─────────────┼───── \ ─────┼───── / ─────┼───── { ─────┼───── } ─────┼───── # ─────┤                                                           ├───── ? ─────┼──── ( { ────┼──── ) } ────┼───── - ─────┼───── : ─────┼───── @ ─────┤
        &kp PAUSE_BREAK &kp RA(MINUS) &kp AMPS      &kp RA(N7)    &kp RA(N0)    &kp NUHS                                                                  &kp LS(MINUS) &lparbrace    &rparbrace    &kp FSLH      &kp LS(DOT)   &kp RA(Q)
     // ├─────────────┼───── # ─────┼───── $ ─────┼───── | ─────┼───── ~ ─────┼───── ` ─────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼───── + ─────┼───── % ─────┼───── " ─────┼───── ' ─────┼─────────────┼─────────────┤
          &sk LGUI      &kp NUHS      &kp LS(N4)    &kp RA(NUBS)  &kp RA(RBKT)  &kp RA(PIPE)     ____          ____              ____          ____       &kp RBKT      &kp PERCENT   &kp LS(N2)    &kp PIPE      &kp LS(COMMA) &sk RGUI
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____         ____           ____          ____          ____              ____          ____          ____          ____          ____
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(NAV,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
              ____      &kp PG_UP     &kp BSPC      &kp UP        &kp DEL       &kp PG_DN                                                                 &kp PG_UP     &kp BSPC      &kp UP        &kp DEL          ____          ____
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              ____      &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT        ____                                                                   &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp RET          ____
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              ____      &kp INS       &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(B)        ____          ____              ____          ____       &kp INS          ____          ____           ____         ____          ____
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____          ____          ____          ____          ____              ____          ____          ____          ____          ____     
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp PAGE_UP PAGE_DOWN                                                            &inc_dec_kp HOME END                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(NUM,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             ____       &p_m          &kp N7        &kp N8        &kp N9           ____                                                                      ____          ____           ____         ____          ____          ____                                                       
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ____       &hml LGUI N0  &hml LALT N4  &hml LCTRL N5 &hml LSHFT N6    ____                                                                      ____          ____           ____         ____          ____          ____                                             
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ____       &m_d          &kp N1        &kp N2        &kp N3        &c_d             ____          ____              ____          ____          ____          ____           ____         ____          ____          ____
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____          ____          ____          ____          ____              ____          ____          ____          ____          ____     
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(FN,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             ____          ____       &kp F7        &kp F8        &kp F9        &kp F10                                                                      ____          ____           ____         ____          ____          ____      
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ____       &kp LGUI      &hml LALT F4  &hml LSHFT F5 &hml RCTRL F6 &kp F11                                                                      ____          ____           ____         ____          ____          ____      
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ____          ____       &kp F1        &kp F2        &kp F3        &kp F10          ____          ____              ____          ____          ____          ____           ____         ____          ____          ____      
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____          ____          ____          ____          ____              ____          ____          ____          ____           ____     
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp LA(TAB) LA(LS(TAB))                                                      &inc_dec_kp LG(LA(RIGHT)) LG(LA(LEFT))                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(SYS,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &ht_btp 0 0   &ht_btp 1 1   &ht_btp 2 2   &ht_btp 3 3   &ht_btp 4 4      ____                                                                      ____          ____           ____         ____          ____          ____     
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              ____          ____          ____          ____         ____       &bootloader                                                               &bootloader      ____           ____         ____          ____          ____     
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              ____          ____          ____          ____         ____       &sys_reset       ____    &ext_power EP_TOG       ____           ____      &sys_reset       ____          ____          ____          ____          ____
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                        ____          ____         ____          ____     &rgb_ug RGB_TOG        ____           ____         ____          ____          ____     
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                            &rgb_encoder_brt                                                                         &rgb_encoder_hue                  
    //                                               (       )                                                                               (       )
)
