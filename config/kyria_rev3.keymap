/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "../zmk-nodefree-config/helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define ____ &trans
#define XXXX &none
#define DEF 0
#define SYM 1
#define NAV 2

#define UG_BRI &rgb_ug RGB_BRI
#define UG_BRD &rgb_ug RGB_BRD
#define UG_TOGGLE &rgb_ug RGB_TOG
#define UG_EFF_CYCL &rgb_ug RGB_EFF


#define C_RED RGB_COLOR_HSB_VAL(0,100,20)
#define C_GREEN RGB_COLOR_HSB_VAL(120,100,20)
#define C_BLUE RGB_COLOR_HSB_VAL(240,100,20)
#define C_WHITE RGB_COLOR_HSB_VAL(0,0,20)
#define C_DEFAULT RGB_COLOR_HSB_VAL(240,100,20)


&led_strip {
    chain-length = <6>; //Underglow only
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

&left_encoder {
    resolution = <4>;
};
&right_encoder {
    resolution = <4>;
};

/ {
behaviors {
        rgb_encoder_hue: rgb_encoder_hue {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_HUE";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        rgb_encoder_brt: rgb_encoder_brt {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER_BRT";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <20>;
    };
};


ZMK_CONDITIONAL_LAYER(1 2, 3)

// momentary layer with color
// e.g. &mo SYM GREEN
ZMK_BEHAVIOR(moc, macro_two_param,
    bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_param_2to2>
        , <&rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        , <&macro_tap &rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
        ;
)

ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(m_blink_w1, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
    ;
)
ZMK_BEHAVIOR(m_blink_w2, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
    ;
)
ZMK_BEHAVIOR(m_blink_w3, macro,
    wait-ms = <250>;
    tap-ms = <250>;
    bindings
      = <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_WHITE>
      , <&rgb_ug RGB_COLOR_HSB_CMD C_DEFAULT>
    ;
)

ZMK_BEHAVIOR(m_bt_sel, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to2>
      , <&bt BT_SEL MACRO_PLACEHOLDER>
      , <&m_blink_w1>
      ;
)

ZMK_BEHAVIOR(m_bt_clr_prof, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
      = <&macro_param_1to1>
      , <&m_bt_sel MACRO_PLACEHOLDER>
      , <&bt BT_CLR>
      , <&m_blink_w2>
    ;
)

ZMK_BEHAVIOR(ht_btp, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <3000>;
    bindings = <&m_bt_clr_prof>,<&m_bt_sel>;
)

ZMK_BEHAVIOR(p_m, mod_morph,
    bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
    mods = <MOD_LSFT>;
)
ZMK_BEHAVIOR(m_d, mod_morph,
    bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
    mods = <MOD_LSFT>;
)
ZMK_BEHAVIOR(c_d, mod_morph,
    bindings = <&kp KP_COMMA>, <&kp KP_DOT>;
    mods = <MOD_LSFT>;
)


// ( and { (with shift) on same key
ZMK_BEHAVIOR(lparbrace, mod_morph,
    bindings = <&kp LS(N8)>, <&kp RA(N7)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ) and } (with shift) on same key
ZMK_BEHAVIOR(rparbrace, mod_morph,
    bindings = <&kp LS(N9)>, <&kp RA(N0)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// < and [ (with shift) on same key
ZMK_BEHAVIOR(ltbrack, mod_morph,
    bindings = <&kp NUBS>, <&kp RA(N8)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// > and ] (with shift) on same key
ZMK_BEHAVIOR(gtbrack, mod_morph,
    bindings = <&kp PIPE2>, <&kp RA(N9)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// BACKSPACE and DELETE (with shift) on same key
ZMK_BEHAVIOR(bspc_del, mod_morph,
    bindings = <&kp BACKSPACE>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// SPACE and RETURN (with shift) on same key
ZMK_BEHAVIOR(space_ret, mod_morph,
    bindings = <&kp SPACE>, <&kp RET>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// Sticky LSHIFT or CAPS_WORD
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

/*
KP      de/qwertz
BSLH    #
PIPE2   >
UNDER   ?
LBKT    ü
RBKT    +
CARET   &
SLASH   -
LBRC    Ü
RBRC    *
STAR    (
HASH    §
DOLAR   $
PIPE    '
TILDE   °
GRAVE   ^
PERCENT %
PLUS    `
EXCL    !
EQUAL   ´
AMPS    /
LPAR    )
MINUS   ß
COLON   Ö
AT_SIGN "
SQT     ä
DQT     Ä
SEMI    ö
QMARK   _
NUBS    <
APOS    ä
LT  ;
GT  :
TILDE   °
TILDE2  '
NUHS    #
RA(PIPE)`
RA(HASH)£
RA(BSLH)’
RA(PIPE2)ˍ
RA(GRAVE)^
RA(NUBS)|
LS(N6)  &
LS(MINUS)?
RA(MINUS)
RA(DOT)
RA(PIPE)`
RA(NUHS)’
RA(NUBS)|

*/
/*
ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp ESC       &kp Q         &kp W         &kp E         &kp R         &kp T                                                                     &kp Y         &kp U         &kp I         &kp O         &kp P         &kp LEFT_BRACKET    
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hrm LSHIFT A &hrm LCTRL S  &hrm LALT D   &hrm LGUI F   &kp G                                                                     &kp H         &hrm LGUI J   &hrm LALT K   &hrm LCTRL L &hrm RSHIFT SEMI &kp SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &ss_cw        &kp Z         &kp X         &kp C         &kp V         &kp B         &kp K_COPY    &kp LCTRL         &kp RCTRL        XXXX       &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH     &kp RSHFT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    &kp K_COPY    &lm_symbol    &lm_nav       &space_ret       ____           &bspc_del     &space_ret    &lm_nav       &lm_symbol    &kp K_PASTE
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
) 
*/
ZMK_LAYER(bone_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp ESC       &kp J         &kp D         &kp U         &kp A         &kp X                                                                     &kp P         &kp H         &kp L         &kp M         &kp W         &kp RA(MINUS)    
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hrm LGUI C   &hrm LALT T   &hrm LSHFT I &hrm LCTRL E   &kp O                                                                     &kp B         &hrm LCTRL N  &hrm RSHFT R  &hrm LALT S   &hrm LGUI G   &kp Q
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &ss_cw        &kp F         &kp V         &kp LEFT_BRACKET  &kp SQT   &kp SEMI      &kp K_COPY    &kp LCTRL         &kp RCTRL        XXXX       &kp Z         &kp Y         &kp COMMA     &kp DOT       &kp K         &sk RALT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    &kp K_COPY  &moc SYM C_RED &moc NAV C_GREEN &space_ret     ____           &bspc_del     &space_ret  &moc NAV C_GREEN &moc SYM C_RED &kp K_PASTE
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp RIGHT LEFT                                                                    &inc_dec_kp DOWN UP                        
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(symbol_layer,
     // ╭─────────────┬───── … ─────┬───── _ ─────┬───── [ ─────┬───── ] ─────┬───── ^ ─────╮                                                           ╭───── ! ─────┬──── < [ ────┬──── > ] ────┬─────────────┬───── & ─────┬───── € ─────╮
          &kp PSCRN     &kp RA(DOT)   &kp QMARK     &kp RA(N8)    &kp RA(N9)    &kp GRAVE                                                                 &kp EXCL      &ltbrack      &gtbrack      &kp EQUAL     &kp LS(N6)    &kp RA(E)
     // ├─────────────┼───── \ ─────┼───── / ─────┼───── { ─────┼───── } ─────┼───── # ─────┤                                                           ├───── ? ─────┼──── ( { ────┼──── ) } ────┼─────────────┼─────────────┼───── @ ─────┤
        &kp PAUSE_BREAK &kp RA(MINUS) &kp AMPS      &kp RA(N7)    &kp RA(N0)    &kp NUHS                                                                  &kp LS(MINUS) &lparbrace    &rparbrace    &kp MINUS     &kp COLON     &kp RA(Q)
     // ├─────────────┼───── # ─────┼───── $ ─────┼───── | ─────┼───── ~ ─────┼───── ` ─────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼───── + ─────┼───── % ─────┼───── " ─────┼───── ' ─────┼─────────────┼─────────────┤
          &sk LGUI      &kp NUHS      &kp LS(N4)    &kp RA(NUBS)  &kp RA(RBKT)  &kp RA(PIPE)     ____          ____              ____          ____       &kp RBKT      &kp PERCENT   &kp LS(N2)    &kp PIPE      &kp SEMI      &sk RGUI
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____         ____           ____          ____          ____              ____          ____          ____          ____          ____
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp C_VOL_UP C_VOL_DN                                                                                          
    //                                               (       )                                                                               (       )
)

ZMK_LAYER(nav_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
              ____      &kp PG_UP     &kp BSPC      &kp UP        &kp DEL       &kp PG_DN                                                                 &p_m          &hrm F7 N7    &hrm F8 N8    &hrm F9 N9    &kp F10          XXXX
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &kp HOME      &kp LEFT      &kp DOWN      &kp RIGHT     &kp END                                                                   &m_d          &hrm F4 N4    &hrm F5 N5    &hrm F6 N6    &kp F11          XXXX
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              ____      &kp INS       &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(B)        ____          ____              ____          ____       &kp N0        &hrm F1 N1    &hrm F2 N2    &hrm F3 N3    &kp F12          XXXX
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       ____          ____          ____          ____          ____              ____       &c_d             ____          ____          ____     
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                          &inc_dec_kp PAGE_UP PAGE_DOWN                                                            &inc_dec_kp HOME END                        
    //                                               (       )                                                                               (       )
)
  
ZMK_LAYER(adjust_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &ht_btp 0 0   &ht_btp 1 1   &ht_btp 2 2   &ht_btp 3 3   &ht_btp 4 4      XXXX                                                                      XXXX          XXXX          XXXX          XXXX          XXXX          XXXX      
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                           ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             XXXX          XXXX          XXXX          XXXX          XXXX          XXXX                                                                     UG_BRI      UG_EFF_CYCL    UG_TOGGLE       XXXX          XXXX          XXXX
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮   ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             XXXX          XXXX          XXXX          XXXX          XXXX       &kp KP_NUM       XXXX          XXXX              XXXX          XXXX         UG_BRD         XXXX          XXXX          XXXX          XXXX          XXXX
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                       XXXX          XXXX          XXXX          XXXX          XXXX              XXXX          XXXX          XXXX          XXXX          XXXX      
     //                                           ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    ,                                            &rgb_encoder_brt                                                                         &rgb_encoder_hue                  
    //                                               (       )                                                                               (       )
)

